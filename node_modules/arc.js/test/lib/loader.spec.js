'use strict';

const fse = require('fs-extra');
const path = require('path');
const chai = require('chai');
const _ = require('lodash');
const loaderTest = require('../../lib/loader');
const chaiAsPromised = require('chai-as-promised');

chai.use(chaiAsPromised);
const { expect } = chai;

describe('loader', async () => {
  const loadedSpec = [
    {
      name: 'routes.js',
      type: 'module'
    },
    {
      name: 'services',
      type: 'component',
      modules: [{ name: 'TestService.js' }, { name: 'Test2Service.js' }]
    },
    {
      name: 'controllers',
      type: 'component',
      modules: [{ name: 'TestController.js' }, { name: 'Test2Controller.js' }]
    },
    {
      name: 'models',
      type: 'component',
      modules: [{ name: 'TestModel.js' }]
    }
  ];

  const userSpec = [
    {
      name: 'routes.js',
      type: 'module'
    },
    {
      name: 'controllers',
      type: 'component',
      modules: [{ name: 'Test2Controller.js' }]
    },
    {
      name: 'services',
      type: 'component',
      modules: [{ name: 'TestService.js' }]
    }
  ];

  const temp = path.resolve('./temp');

  const data = [
    `${temp}/routes.js`,
    `${temp}/services/TestService.js`,
    `${temp}/controllers/TestController.js`,
    `${temp}/models/TestModel.js`,
    `${temp}/controllers/Test2Controller.js`,
    `${temp}/services/Test2Service.js`
  ];

  before(async () => {
    const promiseArray = [];
    _.forEach(data, (x) => promiseArray.push(fse.ensureFile(x)));
    await Promise.all(promiseArray);
  });

  describe('#loadComponent()', () => {
    it('should load all modules within a component', () => {

      const result = {};
      loaderTest.loadComponent(temp, userSpec[1], loadedSpec[2], result);

      expect(result).to.deep.equal({
        Test2Controller: {},
        TestController: {}
      });

    });

    it('should load all modules within a component in the given order', () => {
      const result = {};
      loaderTest.loadComponent(temp, userSpec[1], loadedSpec[2], result);
      expect(_.keys(result)).to.deep.equal([
        'Test2Controller',
        'TestController'
      ]);
    });
  });

  describe('#loadSpecs()', () => {
    it('should load all modules within API directory in the given order', async () => {
      const result = {};
      await loaderTest.loadSpecs(temp, userSpec, loadedSpec, result);
      expect(result).to.deep.equal({
        routes: {},
        controllers: {
          Test2Controller: {},
          TestController: {}
        },
        services: {
          TestService: {},
          Test2Service: {}
        },
        models: { TestModel: {} }
      });
      expect(_.keys(result.controllers)).to.deep.equal([
        'Test2Controller',
        'TestController'
      ]);
      expect(_.keys(result.services)).to.deep.equal([
        'TestService',
        'Test2Service'
      ]);
      expect(_.keys(result.models)).to.deep.equal(['TestModel']);
    });
  });

  describe('#load()', async () => {

    it('should load all modules and components within the api directory', async () => {
      const result = {};
      await loaderTest.load(temp, userSpec, result);
      await expect(result).to.deep.equal({
        routes: {},
        controllers: {
          Test2Controller: {},
          TestController: {}
        },
        services: {
          TestService: {},
          Test2Service: {}
        },
        models: { TestModel: {} }
      });
    });

    it('should load all modules and components within the api directory with the given order', async () => {
      const result = {};
      await loaderTest.load(temp, userSpec, result);
      expect(_.keys(result)).to.deep.equal([
        'routes',
        'controllers',
        'services',
        'models'
      ]);
      expect(_.keys(result.controllers)).to.deep.equal([
        'Test2Controller',
        'TestController'
      ]);
      expect(_.keys(result.services)).to.deep.equal([
        'TestService',
        'Test2Service'
      ]);
      expect(_.keys(result.models)).to.deep.equal(['TestModel']);
    });

  });

  after(async () => {
    await fse.remove(temp);
  });
});
