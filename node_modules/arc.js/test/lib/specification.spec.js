'use strict';

const path = require('path');
const fse = require('fs-extra');
const chai = require('chai');
const specTest = require('../../lib/specification');
const chaiAsPromised = require('chai-as-promised');

chai.use(chaiAsPromised);
const { expect } = chai;

describe('specification', () => {
  const userSchema = [
    {
      name: 'routes.js',
      type: 'module'
    },
    {
      name: 'controllers',
      type: 'component',
      modules: [{ name: 'TestController.js' }, { name: 'Test2Controller.js' }]
    },
    {
      name: 'test',
      type: 'component',
      disable: true
    }
  ];

  const loadedSchema = [
    {
      name: 'data.json',
      type: 'module'
    },
    {
      name: 'controllers',
      type: 'component',
      modules: [
        { name: 'Test2Controller.js' },
        { name: 'TestController.js' },
        { name: 'Test3Controller.js' }
      ]
    },
    {
      name: 'routes.js',
      type: 'module'
    }
  ];

  describe('#loadSchema()', async () => {
    const temp = path.resolve('./temp');

    const data = [
      `${temp}/routes.js`,
      `${temp}/controllers`,
      `${temp}/controllers/TestController.js`,
      `${temp}/test/test.spec.js`
    ];

    before(async () => {
      await Promise.all([
        fse.ensureFile(data[0]),
        fse.ensureDir(data[1]),
        fse.ensureFile(data[2]),
        fse.ensureFile(data[3])
      ]);
    });

    it('should load valid schema from the given location', async () => {
      await expect(specTest.loadSchema(temp, userSchema)).to.eventually.deep.equal([
        {
          name: 'routes.js',
          type: 'module'
        },
        {
          name: 'controllers',
          type: 'component',
          modules: [
            { name: 'TestController.js' }
          ]
        }
      ]);
    });

    after(async () => {
      await fse.remove(temp);
    });

  });

  describe('#validateSchema()', () => {
    it('should return true for valid schema', () => {
      expect(specTest.validateSchema(userSchema)).to.equal(true);
    });
  });

  describe('#validateContent()', () => {
    it('should return true for valid schema content', () => {
      expect(
        specTest.validateContent(userSchema, loadedSchema)
      ).to.equal(true);
    });
  });

});
