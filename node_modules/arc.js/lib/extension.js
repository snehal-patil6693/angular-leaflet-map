'use strict';

const fs = require('../utils/fs');
const _ = require('lodash');
const error = require('./error');

let before = [];
let component = [];
let after = [];

let _deps = {};

async function load ({ location, exts, deps }) {

  _deps = deps;

  const content = await fs.dirContent(location);
  const existExts = _.map(fs.formatFileArray(content.folders), 'name');

  const notFound = _.difference(exts, existExts);
  if (notFound.length) {
    throw new Error(
      error({
        location: 'extensions loader',
        description: `the following specified extensions were not found >> ${notFound}`
      })
    );
  }

  const resolvedPaths = fs.resolvePaths(exts, location);
  const loadedExts = await fs.loadModules(resolvedPaths);
  const extsData = _.map(loadedExts, 'data');

  _.remove(extsData, (e) => {
    const extEnv = _.get(e, 'config.env');

    if (extEnv) {
      return !_.includes(extEnv, process.env.NODE_ENV);
    }
  });

  before = _.compact(_.map(extsData, 'before'));
  component = _.compact(_.map(extsData, 'component'));
  after = _.compact(_.map(extsData, 'after'));
}

async function execBefore (args = {}) {
  _.merge(args, _deps);
  for (const event of before) {
    await event(args);
  }
}

async function execComponent (args = {}) {
  _.merge(args, _deps);
  for (const event of component) {
    await event(args);
  }
}

async function execAfter (args = {}) {
  _.merge(args, _deps);
  for (const event of after) {
    await event(args);
  }
}

module.exports = { load, execBefore, execComponent, execAfter };
