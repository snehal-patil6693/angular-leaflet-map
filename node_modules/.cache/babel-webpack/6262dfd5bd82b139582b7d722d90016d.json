{"ast":null,"code":"/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * See https://mapbox.com/developers/api/.\n */\n\n\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { assert } from '../asserts.js';\nimport { createFromTemplates } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { jsonp as requestJSONP } from '../net.js';\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\n\nvar TileJSON =\n/** @class */\nfunction (_super) {\n  __extends(TileJSON, _super);\n  /**\n   * @param {Options} options TileJSON options.\n   */\n\n\n  function TileJSON(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: SourceState.LOADING,\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    }) || this;\n    /**\n     * @type {Config}\n     * @private\n     */\n\n\n    _this.tileJSON_ = null;\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     * @private\n     */\n\n    _this.tileSize_ = options.tileSize;\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(options.url, _this.handleTileJSONResponse.bind(_this), _this.handleTileJSONError.bind(_this));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', _this.onXHRLoad_.bind(_this));\n        client.addEventListener('error', _this.onXHRError_.bind(_this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      _this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n\n\n  TileJSON.prototype.onXHRLoad_ = function (event) {\n    var client =\n    /** @type {XMLHttpRequest} */\n    event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response = void 0;\n\n      try {\n        response =\n        /** @type {TileJSON} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n\n\n  TileJSON.prototype.onXHRError_ = function (event) {\n    this.handleTileJSONError();\n  };\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n\n\n  TileJSON.prototype.getTileJSON = function () {\n    return this.tileJSON_;\n  };\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n\n\n  TileJSON.prototype.handleTileJSONResponse = function (tileJSON) {\n    var epsg4326Projection = getProjection('EPSG:4326');\n    var sourceProjection = this.getProjection();\n    var extent;\n\n    if (tileJSON['bounds'] !== undefined) {\n      var transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    var minZoom = tileJSON['minzoom'] || 0;\n    var maxZoom = tileJSON['maxzoom'] || 22;\n    var tileGrid = createXYZ({\n      extent: extentFromProjection(sourceProjection),\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      tileSize: this.tileSize_\n    });\n    this.tileGrid = tileGrid;\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] !== undefined && !this.getAttributions()) {\n      var attributionExtent_1 = extent !== undefined ? extent : epsg4326Projection.getExtent();\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent_1, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n\n        return null;\n      });\n    }\n\n    this.tileJSON_ = tileJSON;\n    this.setState(SourceState.READY);\n  };\n  /**\n   * @protected\n   */\n\n\n  TileJSON.prototype.handleTileJSONError = function () {\n    this.setState(SourceState.ERROR);\n  };\n\n  return TileJSON;\n}(TileImage);\n\nexport default TileJSON; //# sourceMappingURL=TileJSON.js.map","map":{"version":3,"sources":["D:/angular-openlayer/node_modules/ol/source/TileJSON.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__","constructor","create","SourceState","TileImage","applyTransform","intersects","assert","createFromTemplates","createXYZ","extentFromProjection","get","getProjection","getTransformFromProjections","jsonp","requestJSONP","TileJSON","_super","options","_this","attributions","cacheSize","crossOrigin","imageSmoothing","projection","reprojectionErrorThreshold","state","LOADING","tileLoadFunction","wrapX","undefined","transition","tileJSON_","tileSize_","tileSize","url","handleTileJSONResponse","bind","handleTileJSONError","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","tileJSON","event","target","status","response","JSON","parse","responseText","err","getTileJSON","epsg4326Projection","sourceProjection","extent","transform","minZoom","maxZoom","tileGrid","tileUrlFunction","getAttributions","attributionExtent_1","getExtent","setAttributions","frameState","setState","READY","ERROR"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * See https://mapbox.com/developers/api/.\n */\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { assert } from '../asserts.js';\nimport { createFromTemplates } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { jsonp as requestJSONP } from '../net.js';\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\nvar TileJSON = /** @class */ (function (_super) {\n    __extends(TileJSON, _super);\n    /**\n     * @param {Options} options TileJSON options.\n     */\n    function TileJSON(options) {\n        var _this = _super.call(this, {\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            imageSmoothing: options.imageSmoothing,\n            projection: getProjection('EPSG:3857'),\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            state: SourceState.LOADING,\n            tileLoadFunction: options.tileLoadFunction,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n            transition: options.transition,\n        }) || this;\n        /**\n         * @type {Config}\n         * @private\n         */\n        _this.tileJSON_ = null;\n        /**\n         * @type {number|import(\"../size.js\").Size}\n         * @private\n         */\n        _this.tileSize_ = options.tileSize;\n        if (options.url) {\n            if (options.jsonp) {\n                requestJSONP(options.url, _this.handleTileJSONResponse.bind(_this), _this.handleTileJSONError.bind(_this));\n            }\n            else {\n                var client = new XMLHttpRequest();\n                client.addEventListener('load', _this.onXHRLoad_.bind(_this));\n                client.addEventListener('error', _this.onXHRError_.bind(_this));\n                client.open('GET', options.url);\n                client.send();\n            }\n        }\n        else if (options.tileJSON) {\n            _this.handleTileJSONResponse(options.tileJSON);\n        }\n        else {\n            assert(false, 51); // Either `url` or `tileJSON` options must be provided\n        }\n        return _this;\n    }\n    /**\n     * @private\n     * @param {Event} event The load event.\n     */\n    TileJSON.prototype.onXHRLoad_ = function (event) {\n        var client = /** @type {XMLHttpRequest} */ (event.target);\n        // status will be 0 for file:// urls\n        if (!client.status || (client.status >= 200 && client.status < 300)) {\n            var response = void 0;\n            try {\n                response = /** @type {TileJSON} */ (JSON.parse(client.responseText));\n            }\n            catch (err) {\n                this.handleTileJSONError();\n                return;\n            }\n            this.handleTileJSONResponse(response);\n        }\n        else {\n            this.handleTileJSONError();\n        }\n    };\n    /**\n     * @private\n     * @param {Event} event The error event.\n     */\n    TileJSON.prototype.onXHRError_ = function (event) {\n        this.handleTileJSONError();\n    };\n    /**\n     * @return {Config} The tilejson object.\n     * @api\n     */\n    TileJSON.prototype.getTileJSON = function () {\n        return this.tileJSON_;\n    };\n    /**\n     * @protected\n     * @param {Config} tileJSON Tile JSON.\n     */\n    TileJSON.prototype.handleTileJSONResponse = function (tileJSON) {\n        var epsg4326Projection = getProjection('EPSG:4326');\n        var sourceProjection = this.getProjection();\n        var extent;\n        if (tileJSON['bounds'] !== undefined) {\n            var transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n            extent = applyTransform(tileJSON['bounds'], transform);\n        }\n        var minZoom = tileJSON['minzoom'] || 0;\n        var maxZoom = tileJSON['maxzoom'] || 22;\n        var tileGrid = createXYZ({\n            extent: extentFromProjection(sourceProjection),\n            maxZoom: maxZoom,\n            minZoom: minZoom,\n            tileSize: this.tileSize_,\n        });\n        this.tileGrid = tileGrid;\n        this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n        if (tileJSON['attribution'] !== undefined && !this.getAttributions()) {\n            var attributionExtent_1 = extent !== undefined ? extent : epsg4326Projection.getExtent();\n            this.setAttributions(function (frameState) {\n                if (intersects(attributionExtent_1, frameState.extent)) {\n                    return [tileJSON['attribution']];\n                }\n                return null;\n            });\n        }\n        this.tileJSON_ = tileJSON;\n        this.setState(SourceState.READY);\n    };\n    /**\n     * @protected\n     */\n    TileJSON.prototype.handleTileJSONError = function () {\n        this.setState(SourceState.ERROR);\n    };\n    return TileJSON;\n}(TileImage));\nexport default TileJSON;\n//# sourceMappingURL=TileJSON.js.map"]},"metadata":{},"sourceType":"module"}